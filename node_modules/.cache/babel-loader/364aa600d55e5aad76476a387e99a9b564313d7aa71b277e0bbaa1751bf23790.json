{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import*as THREE from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";const vertexShader=\"\\n  void main() {\\n    gl_Position = vec4( position, 1.0 );\\n  }\\n\";const fragmentShader=\"\\n  uniform vec2 u_resolution;\\n  uniform vec2 u_mouse;\\n  uniform float u_time;\\n  uniform sampler2D u_noise;\\n  #define PI 3.141592653589793\\n  #define TAU 6.\\n  const float multiplier = 15.5;\\n  const float zoomSpeed = 10.;\\n  const int layers = 10;\\n  const int octaves = 5;\\n  vec2 hash2(vec2 p) {\\n    vec2 o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).xy;\\n    return o;\\n  }\\n  mat2 rotate2d(float _angle){\\n      return mat2(cos(_angle),sin(_angle),-sin(_angle),cos(_angle));\\n  }\\n  vec3 hsb2rgb( in vec3 c ){\\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\\n    rgb = rgb*rgb*(3.0-2.0*rgb);\\n    return c.z * mix( vec3(1.0), rgb, c.y);\\n  }\\n  float hash(vec2 p) {\\n    float o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).x;\\n    return o;\\n  }\\n  float noise(vec2 uv) {\\n    vec2 id = floor(uv);\\n    vec2 subuv = fract(uv);\\n    vec2 u = subuv * subuv * (3. - 2. * subuv);\\n    float a = hash(id);\\n    float b = hash(id + vec2(1., 0.));\\n    float c = hash(id + vec2(0., 1.));\\n    float d = hash(id + vec2(1., 1.));\\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\\n  }\\n  float fbm(in vec2 uv) {\\n    float s = .0;\\n    float m = .0;\\n    float a = .5;\\n    for(int i = 0; i < octaves; i++) {\\n      s += a * noise(uv);\\n      m += a;\\n      a *= .5;\\n      uv *= 2.;\\n    }\\n    return s / m;\\n  }\\n  vec3 domain(vec2 z){\\n    return vec3(hsb2rgb(vec3(atan(z.y,z.x)/TAU,1.,1.)));\\n  }\\n  vec3 colour(vec2 z) {\\n      return domain(z);\\n  }\\n  vec3 render(vec2 uv, float scale, vec3 colour) {\\n    vec2 id = floor(uv);\\n    vec2 subuv = fract(uv);\\n    vec2 rand = hash2(id);\\n    float bokeh = abs(scale) * 1.;\\n    float particle = 0.;\\n    if(length(rand) > 1.3) {\\n      vec2 pos = subuv-.5;\\n      float field = length(pos);\\n      particle = smoothstep(.3, 0., field);\\n      particle += smoothstep(.4 * bokeh, 0.34 * bokeh, field);\\n    }\\n    return vec3(particle*2.);\\n  }\\n  vec3 renderLayer(int layer, int layers, vec2 uv, inout float opacity, vec3 colour, float n) {\\n    vec2 _uv = uv;\\n    float scale = mod((u_time + zoomSpeed / float(layers) * float(layer)) / zoomSpeed, -1.);\\n    uv *= 20.;\\n    uv *= scale*scale;\\n    uv = rotate2d(u_time / 10.) * uv;\\n    uv += vec2(25. + sin(u_time*.1)) * float(layer);\\n    vec3 pass = render(uv * multiplier, scale, colour) * .2;\\n    opacity = 1. + scale;\\n    float _opacity = opacity;\\n    float endOpacity = smoothstep(0., 0.4, scale * -1.);\\n    opacity += endOpacity;\\n    return pass * _opacity * endOpacity;\\n  }\\n  void main() {\\n      vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy);\\n      if(u_resolution.y < u_resolution.x) {\\n        uv /= u_resolution.y;\\n      } else {\\n        uv /= u_resolution.x;\\n      }\\n      float n = fbm((uv + vec2(sin(u_time*.1), u_time*.1)) * 2. - 2.);\\n      vec3 colour = vec3(0.);\\n      colour = n * mix(vec3(0., .5, 1.5)*-1.5, clamp(vec3(1., .5, .25)*2., 0., 1.), n);\\n      float opacity = 1.;\\n      float opacity_sum = 1.;\\n      for(int i = 1; i <= layers; i++) {\\n        colour -= renderLayer(i, layers, uv, opacity, colour, n);\\n        opacity_sum += opacity;\\n      }\\n      colour /= opacity_sum;\\n      gl_FragColor = vec4(clamp(colour * 20., 0., 1.),1.0);\\n  }\\n\";const AshfallAnimation=()=>{const containerRef=useRef();useEffect(()=>{let renderer,scene,camera,uniforms,frameId;let width=window.innerWidth;let height=400;let texture;let disposed=false;const loader=new THREE.TextureLoader();loader.setCrossOrigin(\"anonymous\");loader.load(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png\",tex=>{if(disposed)return;texture=tex;texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.RepeatWrapping;texture.minFilter=THREE.LinearFilter;init();animate();});function init(){camera=new THREE.Camera();camera.position.z=1;scene=new THREE.Scene();const geometry=new THREE.PlaneBufferGeometry(2,2);uniforms={u_time:{type:\"f\",value:1.0},u_resolution:{type:\"v2\",value:new THREE.Vector2(width,height)},u_noise:{type:\"t\",value:texture},u_mouse:{type:\"v2\",value:new THREE.Vector2()}};const material=new THREE.ShaderMaterial({uniforms,vertexShader,fragmentShader});material.extensions={derivatives:true};const mesh=new THREE.Mesh(geometry,material);scene.add(mesh);renderer=new THREE.WebGLRenderer({alpha:true});renderer.setPixelRatio(window.devicePixelRatio);renderer.setSize(width,height);if(containerRef.current){containerRef.current.innerHTML=\"\";containerRef.current.appendChild(renderer.domElement);}window.addEventListener(\"resize\",onWindowResize);}function onWindowResize(){width=window.innerWidth;renderer.setSize(width,height);uniforms.u_resolution.value.x=renderer.domElement.width;uniforms.u_resolution.value.y=renderer.domElement.height;}function animate(now){if(disposed)return;uniforms.u_time.value=(now||0)*0.0005;renderer.render(scene,camera);frameId=requestAnimationFrame(animate);}return()=>{disposed=true;window.removeEventListener(\"resize\",onWindowResize);if(renderer){renderer.dispose();if(renderer.domElement&&renderer.domElement.parentNode){renderer.domElement.parentNode.removeChild(renderer.domElement);}}if(frameId)cancelAnimationFrame(frameId);};},[]);return/*#__PURE__*/_jsx(\"div\",{ref:containerRef,style:{position:'absolute',top:0,left:0,width:'100%',height:400,zIndex:0,pointerEvents:'none'}});};export default AshfallAnimation;","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsx","_jsx","vertexShader","fragmentShader","AshfallAnimation","containerRef","renderer","scene","camera","uniforms","frameId","width","window","innerWidth","height","texture","disposed","loader","TextureLoader","setCrossOrigin","load","tex","wrapS","RepeatWrapping","wrapT","minFilter","LinearFilter","init","animate","Camera","position","z","Scene","geometry","PlaneBufferGeometry","u_time","type","value","u_resolution","Vector2","u_noise","u_mouse","material","ShaderMaterial","extensions","derivatives","mesh","Mesh","add","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","current","innerHTML","appendChild","domElement","addEventListener","onWindowResize","x","y","now","render","requestAnimationFrame","removeEventListener","dispose","parentNode","removeChild","cancelAnimationFrame","ref","style","top","left","zIndex","pointerEvents"],"sources":["/Users/frees/repotresundios/starbuilder-mock/src/components/AshfallAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nconst vertexShader = `\n  void main() {\n    gl_Position = vec4( position, 1.0 );\n  }\n`;\n\nconst fragmentShader = `\n  uniform vec2 u_resolution;\n  uniform vec2 u_mouse;\n  uniform float u_time;\n  uniform sampler2D u_noise;\n  #define PI 3.141592653589793\n  #define TAU 6.\n  const float multiplier = 15.5;\n  const float zoomSpeed = 10.;\n  const int layers = 10;\n  const int octaves = 5;\n  vec2 hash2(vec2 p) {\n    vec2 o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).xy;\n    return o;\n  }\n  mat2 rotate2d(float _angle){\n      return mat2(cos(_angle),sin(_angle),-sin(_angle),cos(_angle));\n  }\n  vec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n  }\n  float hash(vec2 p) {\n    float o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).x;\n    return o;\n  }\n  float noise(vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 u = subuv * subuv * (3. - 2. * subuv);\n    float a = hash(id);\n    float b = hash(id + vec2(1., 0.));\n    float c = hash(id + vec2(0., 1.));\n    float d = hash(id + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n  }\n  float fbm(in vec2 uv) {\n    float s = .0;\n    float m = .0;\n    float a = .5;\n    for(int i = 0; i < octaves; i++) {\n      s += a * noise(uv);\n      m += a;\n      a *= .5;\n      uv *= 2.;\n    }\n    return s / m;\n  }\n  vec3 domain(vec2 z){\n    return vec3(hsb2rgb(vec3(atan(z.y,z.x)/TAU,1.,1.)));\n  }\n  vec3 colour(vec2 z) {\n      return domain(z);\n  }\n  vec3 render(vec2 uv, float scale, vec3 colour) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 rand = hash2(id);\n    float bokeh = abs(scale) * 1.;\n    float particle = 0.;\n    if(length(rand) > 1.3) {\n      vec2 pos = subuv-.5;\n      float field = length(pos);\n      particle = smoothstep(.3, 0., field);\n      particle += smoothstep(.4 * bokeh, 0.34 * bokeh, field);\n    }\n    return vec3(particle*2.);\n  }\n  vec3 renderLayer(int layer, int layers, vec2 uv, inout float opacity, vec3 colour, float n) {\n    vec2 _uv = uv;\n    float scale = mod((u_time + zoomSpeed / float(layers) * float(layer)) / zoomSpeed, -1.);\n    uv *= 20.;\n    uv *= scale*scale;\n    uv = rotate2d(u_time / 10.) * uv;\n    uv += vec2(25. + sin(u_time*.1)) * float(layer);\n    vec3 pass = render(uv * multiplier, scale, colour) * .2;\n    opacity = 1. + scale;\n    float _opacity = opacity;\n    float endOpacity = smoothstep(0., 0.4, scale * -1.);\n    opacity += endOpacity;\n    return pass * _opacity * endOpacity;\n  }\n  void main() {\n      vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy);\n      if(u_resolution.y < u_resolution.x) {\n        uv /= u_resolution.y;\n      } else {\n        uv /= u_resolution.x;\n      }\n      float n = fbm((uv + vec2(sin(u_time*.1), u_time*.1)) * 2. - 2.);\n      vec3 colour = vec3(0.);\n      colour = n * mix(vec3(0., .5, 1.5)*-1.5, clamp(vec3(1., .5, .25)*2., 0., 1.), n);\n      float opacity = 1.;\n      float opacity_sum = 1.;\n      for(int i = 1; i <= layers; i++) {\n        colour -= renderLayer(i, layers, uv, opacity, colour, n);\n        opacity_sum += opacity;\n      }\n      colour /= opacity_sum;\n      gl_FragColor = vec4(clamp(colour * 20., 0., 1.),1.0);\n  }\n`;\n\nconst AshfallAnimation = () => {\n  const containerRef = useRef();\n  useEffect(() => {\n    let renderer, scene, camera, uniforms, frameId;\n    let width = window.innerWidth;\n    let height = 400;\n    let texture;\n    let disposed = false;\n\n    const loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(\"anonymous\");\n    loader.load(\n      \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png\",\n      (tex) => {\n        if (disposed) return;\n        texture = tex;\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.minFilter = THREE.LinearFilter;\n        init();\n        animate();\n      }\n    );\n\n    function init() {\n      camera = new THREE.Camera();\n      camera.position.z = 1;\n      scene = new THREE.Scene();\n      const geometry = new THREE.PlaneBufferGeometry(2, 2);\n      uniforms = {\n        u_time: { type: \"f\", value: 1.0 },\n        u_resolution: { type: \"v2\", value: new THREE.Vector2(width, height) },\n        u_noise: { type: \"t\", value: texture },\n        u_mouse: { type: \"v2\", value: new THREE.Vector2() },\n      };\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader,\n      });\n      material.extensions = { derivatives: true };\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      if (containerRef.current) {\n        containerRef.current.innerHTML = \"\";\n        containerRef.current.appendChild(renderer.domElement);\n      }\n      window.addEventListener(\"resize\", onWindowResize);\n    }\n\n    function onWindowResize() {\n      width = window.innerWidth;\n      renderer.setSize(width, height);\n      uniforms.u_resolution.value.x = renderer.domElement.width;\n      uniforms.u_resolution.value.y = renderer.domElement.height;\n    }\n\n    function animate(now) {\n      if (disposed) return;\n      uniforms.u_time.value = (now || 0) * 0.0005;\n      renderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      disposed = true;\n      window.removeEventListener(\"resize\", onWindowResize);\n      if (renderer) {\n        renderer.dispose();\n        if (renderer.domElement && renderer.domElement.parentNode) {\n          renderer.domElement.parentNode.removeChild(renderer.domElement);\n        }\n      }\n      if (frameId) cancelAnimationFrame(frameId);\n    };\n  }, []);\n\n  return <div ref={containerRef} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: 400, zIndex: 0, pointerEvents: 'none' }} />;\n};\n\nexport default AshfallAnimation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}