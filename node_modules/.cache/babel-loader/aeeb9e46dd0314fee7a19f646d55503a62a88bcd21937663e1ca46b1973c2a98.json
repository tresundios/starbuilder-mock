{"ast":null,"code":"var _jsxFileName = \"/Users/frees/repotresundios/starbuilder-mock/src/components/AshfallAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\n  void main() {\n    gl_Position = vec4( position, 1.0 );\n  }\n`;\nconst fragmentShader = `\n  uniform vec2 u_resolution;\n  uniform vec2 u_mouse;\n  uniform float u_time;\n  uniform sampler2D u_noise;\n  #define PI 3.141592653589793\n  #define TAU 6.\n  const float multiplier = 15.5;\n  const float zoomSpeed = 10.;\n  const int layers = 10;\n  const int octaves = 5;\n  vec2 hash2(vec2 p) {\n    vec2 o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).xy;\n    return o;\n  }\n  mat2 rotate2d(float _angle){\n      return mat2(cos(_angle),sin(_angle),-sin(_angle),cos(_angle));\n  }\n  vec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n  }\n  float hash(vec2 p) {\n    float o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).x;\n    return o;\n  }\n  float noise(vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 u = subuv * subuv * (3. - 2. * subuv);\n    float a = hash(id);\n    float b = hash(id + vec2(1., 0.));\n    float c = hash(id + vec2(0., 1.));\n    float d = hash(id + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n  }\n  float fbm(in vec2 uv) {\n    float s = .0;\n    float m = .0;\n    float a = .5;\n    for(int i = 0; i < octaves; i++) {\n      s += a * noise(uv);\n      m += a;\n      a *= .5;\n      uv *= 2.;\n    }\n    return s / m;\n  }\n  vec3 domain(vec2 z){\n    return vec3(hsb2rgb(vec3(atan(z.y,z.x)/TAU,1.,1.)));\n  }\n  vec3 colour(vec2 z) {\n      return domain(z);\n  }\n  vec3 render(vec2 uv, float scale, vec3 colour) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 rand = hash2(id);\n    float bokeh = abs(scale) * 1.;\n    float particle = 0.;\n    if(length(rand) > 1.3) {\n      vec2 pos = subuv-.5;\n      float field = length(pos);\n      particle = smoothstep(.3, 0., field);\n      particle += smoothstep(.4 * bokeh, 0.34 * bokeh, field);\n    }\n    return vec3(particle*2.);\n  }\n  vec3 renderLayer(int layer, int layers, vec2 uv, inout float opacity, vec3 colour, float n) {\n    vec2 _uv = uv;\n    float scale = mod((u_time + zoomSpeed / float(layers) * float(layer)) / zoomSpeed, -1.);\n    uv *= 20.;\n    uv *= scale*scale;\n    uv = rotate2d(u_time / 10.) * uv;\n    uv += vec2(25. + sin(u_time*.1)) * float(layer);\n    vec3 pass = render(uv * multiplier, scale, colour) * .2;\n    opacity = 1. + scale;\n    float _opacity = opacity;\n    float endOpacity = smoothstep(0., 0.4, scale * -1.);\n    opacity += endOpacity;\n    return pass * _opacity * endOpacity;\n  }\n  void main() {\n      vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy);\n      if(u_resolution.y < u_resolution.x) {\n        uv /= u_resolution.y;\n      } else {\n        uv /= u_resolution.x;\n      }\n      float n = fbm((uv + vec2(sin(u_time*.1), u_time*.1)) * 2. - 2.);\n      vec3 colour = vec3(0.);\n      colour = n * mix(vec3(0., .5, 1.5)*-1.5, clamp(vec3(1., .5, .25)*2., 0., 1.), n);\n      float opacity = 1.;\n      float opacity_sum = 1.;\n      for(int i = 1; i <= layers; i++) {\n        colour -= renderLayer(i, layers, uv, opacity, colour, n);\n        opacity_sum += opacity;\n      }\n      colour /= opacity_sum;\n      gl_FragColor = vec4(clamp(colour * 20., 0., 1.),1.0);\n  }\n`;\nconst AshfallAnimation = () => {\n  _s();\n  const containerRef = useRef();\n  useEffect(() => {\n    let renderer, scene, camera, uniforms, frameId;\n    let width = window.innerWidth;\n    let height = 400;\n    let texture;\n    let disposed = false;\n    const loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(\"anonymous\");\n    loader.load(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png\", tex => {\n      if (disposed) return;\n      texture = tex;\n      texture.wrapS = THREE.RepeatWrapping;\n      texture.wrapT = THREE.RepeatWrapping;\n      texture.minFilter = THREE.LinearFilter;\n      init();\n      animate();\n    });\n    function init() {\n      camera = new THREE.Camera();\n      camera.position.z = 1;\n      scene = new THREE.Scene();\n      const geometry = new THREE.PlaneBufferGeometry(2, 2);\n      uniforms = {\n        u_time: {\n          type: \"f\",\n          value: 1.0\n        },\n        u_resolution: {\n          type: \"v2\",\n          value: new THREE.Vector2(width, height)\n        },\n        u_noise: {\n          type: \"t\",\n          value: texture\n        },\n        u_mouse: {\n          type: \"v2\",\n          value: new THREE.Vector2()\n        }\n      };\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader\n      });\n      material.extensions = {\n        derivatives: true\n      };\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      renderer = new THREE.WebGLRenderer({\n        alpha: true\n      });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      if (containerRef.current) {\n        containerRef.current.innerHTML = \"\";\n        containerRef.current.appendChild(renderer.domElement);\n      }\n      window.addEventListener(\"resize\", onWindowResize);\n    }\n    function onWindowResize() {\n      width = window.innerWidth;\n      renderer.setSize(width, height);\n      uniforms.u_resolution.value.x = renderer.domElement.width;\n      uniforms.u_resolution.value.y = renderer.domElement.height;\n    }\n    function animate(now) {\n      if (disposed) return;\n      uniforms.u_time.value = (now || 0) * 0.0005;\n      renderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    }\n    return () => {\n      disposed = true;\n      window.removeEventListener(\"resize\", onWindowResize);\n      if (renderer) {\n        renderer.dispose();\n        if (renderer.domElement && renderer.domElement.parentNode) {\n          renderer.domElement.parentNode.removeChild(renderer.domElement);\n        }\n      }\n      if (frameId) cancelAnimationFrame(frameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: 400,\n      zIndex: 0,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 10\n  }, this);\n};\n_s(AshfallAnimation, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = AshfallAnimation;\nexport default AshfallAnimation;\nvar _c;\n$RefreshReg$(_c, \"AshfallAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","vertexShader","fragmentShader","AshfallAnimation","_s","containerRef","renderer","scene","camera","uniforms","frameId","width","window","innerWidth","height","texture","disposed","loader","TextureLoader","setCrossOrigin","load","tex","wrapS","RepeatWrapping","wrapT","minFilter","LinearFilter","init","animate","Camera","position","z","Scene","geometry","PlaneBufferGeometry","u_time","type","value","u_resolution","Vector2","u_noise","u_mouse","material","ShaderMaterial","extensions","derivatives","mesh","Mesh","add","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","current","innerHTML","appendChild","domElement","addEventListener","onWindowResize","x","y","now","render","requestAnimationFrame","removeEventListener","dispose","parentNode","removeChild","cancelAnimationFrame","ref","style","top","left","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/frees/repotresundios/starbuilder-mock/src/components/AshfallAnimation.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nconst vertexShader = `\n  void main() {\n    gl_Position = vec4( position, 1.0 );\n  }\n`;\n\nconst fragmentShader = `\n  uniform vec2 u_resolution;\n  uniform vec2 u_mouse;\n  uniform float u_time;\n  uniform sampler2D u_noise;\n  #define PI 3.141592653589793\n  #define TAU 6.\n  const float multiplier = 15.5;\n  const float zoomSpeed = 10.;\n  const int layers = 10;\n  const int octaves = 5;\n  vec2 hash2(vec2 p) {\n    vec2 o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).xy;\n    return o;\n  }\n  mat2 rotate2d(float _angle){\n      return mat2(cos(_angle),sin(_angle),-sin(_angle),cos(_angle));\n  }\n  vec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n  }\n  float hash(vec2 p) {\n    float o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).x;\n    return o;\n  }\n  float noise(vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 u = subuv * subuv * (3. - 2. * subuv);\n    float a = hash(id);\n    float b = hash(id + vec2(1., 0.));\n    float c = hash(id + vec2(0., 1.));\n    float d = hash(id + vec2(1., 1.));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n  }\n  float fbm(in vec2 uv) {\n    float s = .0;\n    float m = .0;\n    float a = .5;\n    for(int i = 0; i < octaves; i++) {\n      s += a * noise(uv);\n      m += a;\n      a *= .5;\n      uv *= 2.;\n    }\n    return s / m;\n  }\n  vec3 domain(vec2 z){\n    return vec3(hsb2rgb(vec3(atan(z.y,z.x)/TAU,1.,1.)));\n  }\n  vec3 colour(vec2 z) {\n      return domain(z);\n  }\n  vec3 render(vec2 uv, float scale, vec3 colour) {\n    vec2 id = floor(uv);\n    vec2 subuv = fract(uv);\n    vec2 rand = hash2(id);\n    float bokeh = abs(scale) * 1.;\n    float particle = 0.;\n    if(length(rand) > 1.3) {\n      vec2 pos = subuv-.5;\n      float field = length(pos);\n      particle = smoothstep(.3, 0., field);\n      particle += smoothstep(.4 * bokeh, 0.34 * bokeh, field);\n    }\n    return vec3(particle*2.);\n  }\n  vec3 renderLayer(int layer, int layers, vec2 uv, inout float opacity, vec3 colour, float n) {\n    vec2 _uv = uv;\n    float scale = mod((u_time + zoomSpeed / float(layers) * float(layer)) / zoomSpeed, -1.);\n    uv *= 20.;\n    uv *= scale*scale;\n    uv = rotate2d(u_time / 10.) * uv;\n    uv += vec2(25. + sin(u_time*.1)) * float(layer);\n    vec3 pass = render(uv * multiplier, scale, colour) * .2;\n    opacity = 1. + scale;\n    float _opacity = opacity;\n    float endOpacity = smoothstep(0., 0.4, scale * -1.);\n    opacity += endOpacity;\n    return pass * _opacity * endOpacity;\n  }\n  void main() {\n      vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy);\n      if(u_resolution.y < u_resolution.x) {\n        uv /= u_resolution.y;\n      } else {\n        uv /= u_resolution.x;\n      }\n      float n = fbm((uv + vec2(sin(u_time*.1), u_time*.1)) * 2. - 2.);\n      vec3 colour = vec3(0.);\n      colour = n * mix(vec3(0., .5, 1.5)*-1.5, clamp(vec3(1., .5, .25)*2., 0., 1.), n);\n      float opacity = 1.;\n      float opacity_sum = 1.;\n      for(int i = 1; i <= layers; i++) {\n        colour -= renderLayer(i, layers, uv, opacity, colour, n);\n        opacity_sum += opacity;\n      }\n      colour /= opacity_sum;\n      gl_FragColor = vec4(clamp(colour * 20., 0., 1.),1.0);\n  }\n`;\n\nconst AshfallAnimation = () => {\n  const containerRef = useRef();\n  useEffect(() => {\n    let renderer, scene, camera, uniforms, frameId;\n    let width = window.innerWidth;\n    let height = 400;\n    let texture;\n    let disposed = false;\n\n    const loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(\"anonymous\");\n    loader.load(\n      \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png\",\n      (tex) => {\n        if (disposed) return;\n        texture = tex;\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.minFilter = THREE.LinearFilter;\n        init();\n        animate();\n      }\n    );\n\n    function init() {\n      camera = new THREE.Camera();\n      camera.position.z = 1;\n      scene = new THREE.Scene();\n      const geometry = new THREE.PlaneBufferGeometry(2, 2);\n      uniforms = {\n        u_time: { type: \"f\", value: 1.0 },\n        u_resolution: { type: \"v2\", value: new THREE.Vector2(width, height) },\n        u_noise: { type: \"t\", value: texture },\n        u_mouse: { type: \"v2\", value: new THREE.Vector2() },\n      };\n      const material = new THREE.ShaderMaterial({\n        uniforms,\n        vertexShader,\n        fragmentShader,\n      });\n      material.extensions = { derivatives: true };\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      renderer = new THREE.WebGLRenderer({ alpha: true });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(width, height);\n      if (containerRef.current) {\n        containerRef.current.innerHTML = \"\";\n        containerRef.current.appendChild(renderer.domElement);\n      }\n      window.addEventListener(\"resize\", onWindowResize);\n    }\n\n    function onWindowResize() {\n      width = window.innerWidth;\n      renderer.setSize(width, height);\n      uniforms.u_resolution.value.x = renderer.domElement.width;\n      uniforms.u_resolution.value.y = renderer.domElement.height;\n    }\n\n    function animate(now) {\n      if (disposed) return;\n      uniforms.u_time.value = (now || 0) * 0.0005;\n      renderer.render(scene, camera);\n      frameId = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      disposed = true;\n      window.removeEventListener(\"resize\", onWindowResize);\n      if (renderer) {\n        renderer.dispose();\n        if (renderer.domElement && renderer.domElement.parentNode) {\n          renderer.domElement.parentNode.removeChild(renderer.domElement);\n        }\n      }\n      if (frameId) cancelAnimationFrame(frameId);\n    };\n  }, []);\n\n  return <div ref={containerRef} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: 400, zIndex: 0, pointerEvents: 'none' }} />;\n};\n\nexport default AshfallAnimation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}